import random
import tkinter as tk
from tkinter import messagebox, ttk
from ai import AIHelper

class Cell:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.is_mine = False
        self.adjacent_mines = 0
        self.is_revealed = False
        self.is_flagged = False
        self.button = None

class Minesweeper:
    def __init__(self, master):
        self.master = master
        self.master.title("Minesweeper")
        self.master.configure(bg='gray')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ò–ò
        self.ai = AIHelper()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        self.difficulties = {
            "–õ–µ–≥–∫–∏–π": (9, 9, 10),
            "–°—Ä–µ–¥–Ω–∏–π": (16, 16, 40),
            "–°–ª–æ–∂–Ω—ã–π": (16, 30, 99)
        }
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å
        self.top_frame = tk.Frame(self.master, bg='gray')
        self.top_frame.pack(padx=10, pady=5)
        
        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        self.difficulty_var = tk.StringVar(value="–õ–µ–≥–∫–∏–π")
        self.difficulty_menu = ttk.Combobox(
            self.top_frame,
            textvariable=self.difficulty_var,
            values=list(self.difficulties.keys()),
            state="readonly",
            width=10
        )
        self.difficulty_menu.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        self.restart_button = tk.Button(
            self.top_frame,
            text="üîÑ",
            font=('Arial', 12),
            command=self.restart_game
        )
        self.restart_button.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏ –ò–ò
        self.ai_button = tk.Button(
            self.top_frame,
            text="ü§ñ",
            font=('Arial', 12),
            command=self.get_ai_help
        )
        self.ai_button.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ò–ò
        self.stats_button = tk.Button(
            self.top_frame,
            text="üìä",
            font=('Arial', 12),
            command=self.show_ai_stats
        )
        self.stats_button.pack(side=tk.LEFT, padx=5)
        
        # –°—á–µ—Ç—á–∏–∫ –º–∏–Ω
        self.mines_label = tk.Label(
            self.top_frame,
            text="üí£: 0",
            font=('Arial', 12, 'bold'),
            bg='gray'
        )
        self.mines_label.pack(side=tk.LEFT, padx=5)
        
        # –§—Ä–µ–π–º –¥–ª—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
        self.button_frame = tk.Frame(self.master, bg='gray')
        self.button_frame.pack(padx=10, pady=5)
        
        self.start_new_game()
        
    def start_new_game(self):
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        for widget in self.button_frame.winfo_children():
            widget.destroy()
            
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        difficulty = self.difficulties[self.difficulty_var.get()]
        self.rows, self.cols, self.mines = difficulty
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.cells = [[Cell(x, y) for y in range(self.cols)] for x in range(self.rows)]
        self.mine_positions = set()
        self.game_over = False
        self.first_click = True
        self.flagged_cells = 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ò–ò
        self.ai.set_field(self.cells, self.rows, self.cols)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –º–∏–Ω
        self.update_mines_counter()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
        self.create_board()
        
    def get_ai_help(self):
        if self.game_over or self.first_click:
            print("–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å –∏–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å")
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ò–ò –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ö–æ–¥–æ–º
        self.ai.set_field(self.cells, self.rows, self.cols)
        print("–°–æ—Å—Ç–æ—è–Ω–∏–µ –ò–ò –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –º–∏–Ω—É
        mine_move = self.ai.get_mine_move()
        print(f"–ü–æ–∏—Å–∫ –º–∏–Ω—ã: {mine_move}")
        if mine_move:
            x, y = mine_move
            print(f"–ù–∞–π–¥–µ–Ω–∞ –º–∏–Ω–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏ ({x}, {y})")
            if not self.cells[x][y].is_revealed and not self.cells[x][y].is_flagged:
                print("–°—Ç–∞–≤–∏–º —Ñ–ª–∞–∂–æ–∫")
                self.ai.learn_from_move(x, y, True)
                self.toggle_flag(x, y)
                return
            
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –º–∏–Ω—É, –¥–µ–ª–∞–µ–º —Ö–æ–¥
        print("–ò—â–µ–º —Ö–æ–¥")
        move = self.ai.get_safe_move()  # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ö–æ–¥
        print(f"–ù–∞–π–¥–µ–Ω —Ö–æ–¥: {move}")
        x, y = move
        print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–µ—Ç–∫—É ({x}, {y})")
        if not self.cells[x][y].is_revealed and not self.cells[x][y].is_flagged:
            print("–î–µ–ª–∞–µ–º —Ö–æ–¥")
            self.ai.learn_from_move(x, y, True)
            self.handle_click(x, y)
        else:
            print("–ö–ª–µ—Ç–∫–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∏–ª–∏ –ø–æ–º–µ—á–µ–Ω–∞ —Ñ–ª–∞–∂–∫–æ–º")

    def restart_game(self):
        self.start_new_game()
        
    def update_mines_counter(self):
        remaining_mines = self.mines - self.flagged_cells
        self.mines_label.config(text=f"üí£: {remaining_mines}")
        
    def create_board(self):
        for x in range(self.rows):
            for y in range(self.cols):
                cell = self.cells[x][y]
                button = tk.Button(
                    self.button_frame,
                    width=3,
                    height=2,
                    font=('Arial', 12, 'bold'),
                    bg='lightgray',
                    relief=tk.RAISED,
                    command=lambda x=x, y=y: self.handle_click(x, y)
                )
                button.bind('<Button-3>', lambda e, x=x, y=y: self.toggle_flag(x, y))
                button.grid(row=x, column=y, padx=1, pady=1)
                cell.button = button

    def place_mines(self, first_x, first_y):
        while len(self.mine_positions) < self.mines:
            x = random.randint(0, self.rows - 1)
            y = random.randint(0, self.cols - 1)
            if (x, y) not in self.mine_positions and \
               (abs(x - first_x) > 1 or abs(y - first_y) > 1):
                self.cells[x][y].is_mine = True
                self.mine_positions.add((x, y))
        self.calculate_adjacent_mines()

    def calculate_adjacent_mines(self):
        for x in range(self.rows):
            for y in range(self.cols):
                if self.cells[x][y].is_mine:
                    continue
                count = 0
                for dx in [-1, 0, 1]:
                    for dy in [-1, 0, 1]:
                        nx, ny = x + dx, y + dy
                        if 0 <= nx < self.rows and 0 <= ny < self.cols:
                            if self.cells[nx][ny].is_mine:
                                count += 1
                self.cells[x][y].adjacent_mines = count

    def handle_click(self, x, y):
        if self.game_over or self.cells[x][y].is_flagged:
            return

        if self.first_click:
            self.first_click = False
            self.place_mines(x, y)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ò–ò –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–∏–Ω
            self.ai.set_field(self.cells, self.rows, self.cols)

        if self.cells[x][y].is_mine:
            self.game_over = True
            self.reveal_all_mines()
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–µ—É—Å–ø–µ—à–Ω—ã–π —Ö–æ–¥
            self.ai.learn_from_move(x, y, False)
            messagebox.showinfo("Game Over", "You hit a mine!")
            return

        self.reveal_cell(x, y)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ò–ò –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞
        self.ai.set_field(self.cells, self.rows, self.cols)
        
        if self.check_win():
            messagebox.showinfo("Congratulations", "You won!")

    def reveal_cell(self, x, y):
        cell = self.cells[x][y]
        if cell.is_revealed or cell.is_flagged:
            return

        cell.is_revealed = True
        if cell.is_mine:
            cell.button.config(text="üí£", bg="red", relief=tk.SUNKEN)
        else:
            if cell.adjacent_mines > 0:
                cell.button.config(text=str(cell.adjacent_mines), bg="white", relief=tk.SUNKEN)
            else:
                cell.button.config(text="", bg="white", relief=tk.SUNKEN)
                for dx in [-1, 0, 1]:
                    for dy in [-1, 0, 1]:
                        nx, ny = x + dx, y + dy
                        if 0 <= nx < self.rows and 0 <= ny < self.cols:
                            self.reveal_cell(nx, ny)

    def toggle_flag(self, x, y):
        if self.game_over or self.cells[x][y].is_revealed:
            return

        cell = self.cells[x][y]
        cell.is_flagged = not cell.is_flagged
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ñ–ª–∞–∂–∫–æ–≤
        if cell.is_flagged:
            self.flagged_cells += 1
        else:
            self.flagged_cells -= 1
            
        self.update_mines_counter()
        cell.button.config(text="üö©" if cell.is_flagged else "", bg="lightgray")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ò–ò –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–∂–∫–∞
        self.ai.set_field(self.cells, self.rows, self.cols)

    def reveal_all_mines(self):
        for x in range(self.rows):
            for y in range(self.cols):
                if self.cells[x][y].is_mine:
                    self.cells[x][y].button.config(text="üí£", bg="red", relief=tk.SUNKEN)

    def check_win(self):
        for x in range(self.rows):
            for y in range(self.cols):
                cell = self.cells[x][y]
                if not cell.is_mine and not cell.is_revealed:
                    return False
        return True

    def show_ai_stats(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è –ò–ò"""
        stats = self.ai.get_stats()
        messagebox.showinfo("AI Statistics", stats)

if __name__ == "__main__":
    root = tk.Tk()
    game = Minesweeper(root)
    root.mainloop()